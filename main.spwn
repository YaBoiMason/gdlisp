let program = $.get_input('gdlisp) ')

let env = {}

env['+'] = (args) {
    return args[0] + args[1]
}

env['-'] = (args) {
    return args[0] - args[1]
}

env['*'] = (args) {
    return args[0] * args[1]
}

env['/'] = (args) {
    return args[0] / args[1]
}

env['>'] = (args) {
    return args[0] > args[1]
}

env['<'] = (args) {
    return args[0] < args[1]
}

env['>='] = (args) {
    return args[0] >= args[1]
}

env['<='] = (args) {
    return args[0] <= args[1]
}

env['='] = (args) {
    return args[0] == args[1]
}

env['print'] = (args) {
    $.print(args[0])
}

atom = (val) {
    if @regex::new("^[0-9]").match(val) {
        return @number(val)
    } else {
        return @string(val)
    }
}

lex = (program) {
    let i_program = @regex::new("\\(").replace(program, " ( ")
    i_program = @regex::new("\\)").replace(i_program, " ) ")
    i_program = i_program.split(' ')
    i_program.remove(0)
    i_program.pop()
    while i_program.index('') != null {
        i_program.remove(i_program.index(''))
    }
    return i_program
}

let i_tokens = []

rft = (tokens) {
    i_tokens = tokens
    let token = i_tokens.remove(0)
    if token == '(' {
        let l = []
        while i_tokens[0] != ')' {
            l.push(rft(i_tokens))
        }
        i_tokens.remove(0)
        return l
    } else if token == ')' {
        $.print('unexpected )')
    } else {
        return atom(token)
    }
}

eval = (exp, env) {
    if exp.type == @string {
        return env[exp]
    } else if exp.type == @number {
        return exp
    } else if exp[0] == "if"{ 
        let test = exp[1]
        let conseq = exp[2]
        let alt = exp[3]
        let exep = null
        if eval(test, env) {
            exep = conseq
        } else {
            exep = alt
        }
        return eval(exep, env)
    } else if exp[0] == "define" {
        let symbol = exp[1]
        let exep = exp[2]
        env[symbol] = eval(exepm, env)
    } else {
        let proc = eval(exp[0], env)
        let args = []
        for arg in exp[1:] {
            args.push(eval(arg, env))
        }
        return proc(args)
    }
}

$.print(eval(rft(lex(program)), env))